-- HTML5 Video Encoder Droplet

-- Summary: 
-- This AppleScript droplet takes video files and converts each to 3 output videos in the same folder as the source, using ffmpeg.  The 3 output formats are Ogg Vorbis (ogg video, vorbis audio), MP4 (mp4 container, h.264 video, aac audio), and WEBM (vp8 video, vorbis audio).  The formats are discussed here: http://diveintohtml5.info/video.html
-- It prompts what width to resize to, and what video bitrate to use.

-- To use: 
--Drag one or more videos onto the application icon.

-- Requirements:
-- Install xcode
-- Install ffmpeg (brew install ffmpeg --with-theora --with-libogg --with-libvorbis --with-libvpx)

-- To edit the app:
-- Open with AppleScript Editor

global fileName
global suffix

on run
	-- If you double click the app icon
	display dialog "I'm a droplet.  Drop 1 or more videos onto me.  I'll convert and save them to the same folder." with icon caution buttons {"OK"} default button "OK"
end run

on open names
	-- Configuration
	set outputFormats to {"Instagram (Regular)", "Instagram (Small Letterbox)", "Instagram (Letterbox)", "Facebook", "Vine", "Youtube (Regular)", "HTML5: MP4", "HTML5: WEBM", "HTML5: OGV"}
	set audioBitrate to "128k"
	set videoBitrate to 3
	
	-- Prompt output formats
	set selectedFormats to {choose from list outputFormats with prompt "Choose output formats: (Select multiple with cmd/shift)" with multiple selections allowed}
	set selectedFormats to selectedFormats as text
	
	-- HTML5 video prompts (size, bitrate)
	if selectedFormats contains "HTML5" then
		display dialog "HTML5: Resize to width (pixels, 0 = don't resize)" default answer "0"
		set videoWidth to text returned of result
		display dialog "HTML5: Video bitrate (MBps)" default answer "1"
		set videoBitrate to text returned of result
		--display dialog videoBitrate
		-- Set videoWidth parameter string
		if videoWidth is 0 then
			set videoWidth to ""
		else
			set videoWidth to " -vf scale=" & videoWidth & ":-1 "
		end if
	end if
	
	
	-- Set video bitrate string (only used for suffix)
	set videoBitratestring to videoBitrate
	if videoBitratestring < 1 then
		set videoBitratestring to videoBitratestring * 1024 & "k"
	else
		set videoBitratestring to videoBitratestring & "m"
	end if
	-- Convert MB to KB, because KB has been giving me more predictable file size.
	set videoBitrate to (videoBitrate * 1024) as integer
	set videoBitrate to (videoBitrate as string) & "k"
	
	-------------------------
	-- Loop through all input files
	-------------------------
	repeat with itemnum from 1 to count of names
		
		-- inputPath: absolute path to file
		set inputPath to POSIX path of (item itemnum of names)
		
		-- fileParent: absolute path to file's parent folder
		tell application "Finder"
			set fileParent to inputPath
			set AppleScript's text item delimiters to "/"
			set fileParent to text items 1 thru -2 of fileParent as text
			set fileParent to fileParent & "/"
		end tell
		
		-- fileName: file's name without extension
		tell application "Finder"
			set inputName to name of file (item itemnum of names)
			set fileName to inputName
			set AppleScript's text item delimiters to "."
			if number of text items of fileName > 1 then
				set fileName to text items 1 thru -2 of fileName as text
			end if
		end tell
		--display dialog "inputPath: " & inputPath & ", fileParent: " & fileParent & ", fileName: " & fileName
		
		-- After encoding: open folder, play sound.
		set afterEncoding to "open .; afplay \"/System/Library/Sounds/Glass.aiff\";"
		
		-- Start conversion
		
		if selectedFormats contains "HTML5: OGV" then
			set suffix to "-html5-" & videoBitratestring & ".ogv"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i  '" & inputName & "' -acodec libvorbis -ac 2 -ab " & audioBitrate & " -ar 44100 -b:v " & videoBitrate & " " & videoWidth & "'" & outputName & "'; " & afterEncoding
				end tell
			end if
		end if
		
		if selectedFormats contains "HTML5: MP4" then
			set suffix to "-html5-" & videoBitratestring & ".mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -acodec aac -ac 2 -strict experimental -ab " & audioBitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -f mp4 -threads 0 -pix_fmt yuv420p " & videoWidth & "'" & outputName & "'; " & afterEncoding
				end tell
			end if
		end if
		
		if selectedFormats contains "HTML5: WEBM" then
			set suffix to "-html5-" & videoBitratestring & ".webm"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -acodec libvorbis -ac 2 -ab " & audioBitrate & " -ar 44100 -vcodec libvpx -b:v " & videoBitrate & " " & videoWidth & "'" & outputName & "'; " & afterEncoding
				end tell
			end if
		end if
		
		if selectedFormats contains "Instagram (Regular)" then
			set suffix to "-instagram.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -ar 44100 -acodec aac -ac 2 -strict experimental -ab " & audioBitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -f mp4 -threads 0 -pix_fmt yuv420p -t 15 -vf \"crop=ih:ih:iw/2-ih/2:0,scale=640:640\" " & "'" & outputName & "'; " & afterEncoding & " echo \"Instagram videos are trimmed to 15 seconds.\""
				end tell
			end if
		end if
		
		if selectedFormats contains "Instagram (Small Letterbox)" then
			set suffix to "-instagram-small-letterbox.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -ar 44100 -acodec aac -ac 2 -strict experimental -ab " & audioBitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -f mp4 -threads 0 -pix_fmt yuv420p -t 15 -vf \"crop=iw-(iw-ih)/2:ih,pad=iw:iw:0:(iw-ih)/2,scale=640:640\" " & "'" & outputName & "'; " & afterEncoding & " echo \"Instagram videos are trimmed to 15 seconds.\""
				end tell
			end if
		end if
		
		if selectedFormats contains "Instagram (Letterbox)" then
			set suffix to "-instagram-letterbox.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -ar 44100 -acodec aac -ac 2 -strict experimental -ab " & audioBitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -f mp4 -threads 0 -pix_fmt yuv420p -t 15 -vf \"pad=iw:iw:0:(iw-ih)/2,scale=640:640\" " & "'" & outputName & "'; " & afterEncoding & " echo \"Instagram videos are trimmed to 15 seconds.\""
				end tell
			end if
		end if
		
		if selectedFormats contains "Facebook" then
			set suffix to "-facebook.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -acodec aac -ac 2 -strict experimental -ab " & audioBitrate & " -ar 44100 -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -vf \"scale=min(1280\\,iw):trunc(ow/a/16)*16\" -r 30 -t 20:00 -f mp4 -threads 0 -pix_fmt yuv420p " & "'" & outputName & "'; " & afterEncoding & " echo \"Facebook videos are trimmed to 20 minutes.\""
				end tell
			end if
		end if
		
		if selectedFormats contains "Vine" then
			set suffix to "-vine.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			if checkExist(outputPath) then
				tell application "Terminal"
					do script "cd \"" & fileParent & "\"; ffmpeg -i '" & inputName & "' -ar 44100 -acodec aac -ac 1 -strict experimental -ab " & audioBitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v 1048k -r 24 -f mp4 -threads 0 -pix_fmt yuv420p -t 6 -vf crop=ih:ih:iw/2-ih/2:0,scale=480:480 " & "'" & outputName & "'; " & afterEncoding & " echo \"Vine videos are trimmed to 6 seconds.\""
				end tell
			end if
		end if
		
		if selectedFormats contains "Youtube (Regular)" then
			set suffix to "-youtube.mp4"
			set outputName to fileName & suffix
			set outputPath to fileParent & outputName
			
			-- Two pass ffmpeg encoding
			-- Youtube encoding settings: https://support.google.com/youtube/answer/1722171?hl=en
			
			-- Save ffmpeg params, use in both passes
			set audioBitrate to "320k"
			set videoBitrate to "8000k"
			set params to "-c:a aac -ac 2 -strict experimental -b:a " & audioBitrate & " -ar 48000 -vcodec libx264 -preset slow -profile:v high -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videoBitrate & " -f mp4 -threads 0 -pix_fmt yuv420p -bf 2 -coder 1"
			
			if checkExist(outputPath) then
				--display dialog inputPath & params & outputPath & fileParent & afterEncoding
				tell application "Terminal"
					-- Pass 1: Write to dev/null, but save bitrate info to log files.
					-- Pass 2: Read log files, write to output file.
					do script "cd \"" & fileParent & "\"; ffmpeg -i \"" & inputName & "\" -y " & params & " -pass 1 /dev/null && ffmpeg -i \"" & inputName & "\" " & params & " -pass 2 -movflags faststart \"" & outputName & "\"; rm \"ffmpeg2pass-0.log\"; rm \"ffmpeg2pass-0.log.mbtree\"; " & afterEncoding & " echo \"Finished 2-pass Youtube encoding.\""
				end tell
			end if
		end if
	end repeat
	return
end open

-- Check if file exists
on checkExist(outputPath)
	set outputPathPosix to POSIX file outputPath
	--display dialog ("checkExist: " & outputPath)
	set theReturn to true
	tell application "Finder"
		if outputPathPosix exists then
			set theResult to (display dialog "Overwrite file? " & fileName & suffix buttons {"Overwrite", "Skip"} default button "Skip")
			if button returned of theResult is "Overwrite" then
				delete file outputPathPosix
			else if button returned of theResult is "Skip" then
				set theReturn to false
			end if
		end if
	end tell
	--display dialog "checkExist complete: theReturn: " & theReturn
	return theReturn
end checkExist
